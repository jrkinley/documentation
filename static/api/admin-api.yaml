openapi: 3.0.1
info:
  title: Redpanda Admin API
  description: |
    Administer and manage Redpanda with Admin API.
    
  version: 1.0.0
servers:
- url: http://localhost:9644/v1
paths:
  /config:
    get:
      summary: List cluster configurations
      description: List the cluster configuration properties of a cluster.
      operationId: get_config
      responses:
        200:
          description: Configuration
          content: {}
  /node_config:
    get:
      summary: List node configurations
      description: List the node configuration properties of the nodes (brokers) in
        a cluster.
      operationId: get_node_config
      responses:
        200:
          description: Configuration
          content: {}
  /loggers:
    get:
      summary: List all loggers
      description: List names of all registered loggers.
      operationId: get_loggers
      responses:
        200:
          description: List of registered loggers. Each logger has its own configurable `log_level` that dictates how verbose logs are within their corresponding subsystems. 
          content: {}
  /config/log_level/{name}:
    put:
      summary: Set log level
      description: Set the level of logger messages.
      operationId: set_log_level
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      - name: level
        in: query
        description: Log level to set.
        required: true
        schema:
          type: string
          enum:
          - error
          - warn
          - info
          - debug
          - trace
      - name: expires
        in: query
        schema:
          type: number
      responses:
        200:
          description: Log level
          content: {}
  /cluster_config:
    get:
      summary: List cluster configuration
      description: List the cluster configuration properties of a cluster.
      operationId: get_cluster_config
      parameters:
      - name: include_defaults
        in: query
        description: If false, only properties which have been changed from the default
          are included.
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/cluster_config_properties'
    put:
      summary: Update cluster configuration
      description: Modify cluster configuration properties of a cluster.
      operationId: patch_cluster_config
      parameters:
      - name: force
        in: query
        description: If nonzero, skip validation of properties, and permit setting
          unknown properties
        schema:
          type: string
      - name: dry_run
        in: query
        description: If nonzero, do not apply any changes (but still do validation
          and return 400 on errors)
        schema:
          type: string
      responses:
        200:
          description: Success
          content: {}
  /cluster_config/schema:
    get:
      summary: Get cluster configuration schema
      description: Get the schema describing all cluster configuration properties.
      operationId: get_cluster_config_schema
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
  /cluster_config/status:
    get:
      summary: Get cluster configuration status
      description: Get the configuration status of all nodes in a cluster.
      operationId: get_cluster_config_status
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/cluster_config_status'
  /raft/{group_id}/transfer_leadership:
    post:
      summary: Transfer Raft group leadership
      description: Transfer leadership of the Raft group (`{group_id}`) to the node
        with `target` ID.
      operationId: raft_transfer_leadership
      parameters:
      - name: group_id
        in: path
        required: true
        schema:
          type: integer
      - name: target
        in: query
        schema:
          type: integer
      responses:
        200:
          description: Raft leadership transfer
          content: {}
  /security/users:
    get:
      summary: List users
      description: List users.
      operationId: list_users
      parameters:
      - name: include_ephemeral
        in: query
        required: false
        schema:
          type: boolean
      responses:
        200:
          description: List users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
    post:
      summary: Create a user
      description: Create a user.
      operationId: create_user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/security_create_user'
      responses:
        200:
          description: Create user
          content: {}
  /security/users/{user}:
    put:
      summary: Update a user
      description: Update a user.
      operationId: update_user
      parameters:
      - name: user
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/scram_credential'
      responses:
        200:
          description: Update user
          content: {}
    delete:
      summary: Delete a user
      description: Deleate a user.
      operationId: delete_user
      parameters:
      - name: user
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Delete user
          content: {}
  /status/ready:
    get:
      summary: Get cluster's ready status
      description: Check the health of the Redpanda cluster.
      operationId: ready
      responses:
        200:
          description: Redpanda is up and running
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cluster_ready_status'
  /features:
    get:
      summary: List available features
      description: List the available Redpanda features. Available features are based
        on the loaded Redpanda license and activated features configuration.
      operationId: get_features
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/features_response'
  /features/license:
    get:
      summary: Get license information
      description: Get currently loaded license information
      operationId: get_license
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/license_response'
    put:
      summary: Upload a new license to redpanda
      operationId: put_license
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/license_contents'
      responses:
        200:
          description: Success
          content: {}
  /features/{feature_name}:
    put:
      summary: Activate feature
      description: Activate or deactivate a feature.
      operationId: put_feature
      parameters:
      - name: feature_name
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content: {}
  /brokers:
    get:
      summary: List all brokers
      description: List information about all brokers in the cluster.
      operationId: get_brokers
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/broker'
  /brokers/{id}:
    get:
      summary: List a broker
      description: List information about the specified broker in the cluster.
      operationId: get_broker
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/broker'
  /brokers/{id}/cancel_partition_moves:
    post:
      summary: Cancel partition movement to/from a broker
      description: Cancel all movement of partition replicas to or from the specified
        node.
      operationId: cancel_partition_moves
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Success
          content: {}
  /brokers/{id}/decommission:
    get:
      summary: Get broker decommission status
      description: Get the status on the decommissioning of the broker with the specified
        `id`.
      operationId: get_decommission
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Success
          content: {}
    put:
      summary: Decommission broker
      description: Decommission the specified broker.
      operationId: decommission
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Success
          content: {}
  /brokers/{id}/maintenance:
    put:
      summary: Enter broker maintenance mode
      description: Request the specified broker to enter maintenance mode.
      operationId: start_broker_maintenance
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Success
          content: {}
    delete:
      summary: Exit broker maintenance mode
      description: Request the specified broker to exit maintenance mode.
      operationId: stop_broker_maintenance
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Success
          content: {}
  /brokers/{id}/recommission:
    put:
      summary: Recommission broker
      description: Recommission the specified broker.
      operationId: recommission
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Success
          content: {}
  /cluster_view:
    get:
      summary: Get cluster view
      description: Get a summary view of a cluster and its brokers.
      operationId: get_cluster_view
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cluster_view'
  /maintenance:
    get:
      summary: Get maintenance status
      description: Get status of maintenance.
      operationId: get_local_maintenance
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/maintenance_status'
    put:
      summary: Start maintenance
      description: Start local maintenance.
      operationId: start_local_maintenance
      responses:
        200:
          description: Success
          content: {}
    delete:
      summary: Stop maintenance
      description: Stop local maintenance.
      operationId: stop_local_maintenance
      responses:
        200:
          description: Success
          content: {}
  /partitions:
    get:
      summary: List partitions
      description: Get a list of partition replicas hosted by the current node. Returns only those partitions whose replicas are present on the queried node, not all partitions in the cluster.
      operationId: get_partitions
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/partition_summary'
  /partitions/local_summary:
    get:
      summary: Get local partitions
      description: Get a summary of the partition(s) replicated on the requesting
        node.
      operationId: get_partitions_local_summary
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/partitions_local_summary'
  /partitions/rebalance:
    post:
      summary: Rebalance partitions
      description: Trigger an on-demand rebalancing of partitions in the cluster.
      operationId: trigger_partitions_rebalance
      responses:
        200:
          description: Success
          content: {}
  /partitions/reconfigurations:
    get:
      summary: List ongoing partition reconfigurations
      description: List ongoing partition reconfigurations.
      operationId: get_partition_reconfigurations
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/reconfiguration'
  /partitions/{namespace}/{topic}:
    get:
      summary: Get topic partition information
      description: Get topic partition information.
      operationId: get_topic_partitions
      parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/partition'
  /partitions/{namespace}/{topic}/{partition}:
    get:
      summary: Get detailed partition information
      description: Get detailed information for a partition.
      operationId: get_partition
      parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: partition
        in: path
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/partition'
  /partitions/{namespace}/{topic}/{partition}/cancel_reconfiguration:
    post:
      summary: Cancel partition reconfiguration
      description: Cancel an in-progress reconfiguration of a partition.
      operationId: cancel_partition_reconfiguration
      parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: partition
        in: path
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Success
          content: {}
  /partitions/{namespace}/{topic}/{partition}/mark_transaction_expired:
    post:
      summary: Mark transaction expired
      description: Mark transaction expired for the specified partition.
      operationId: mark_transaction_expired
      parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: partition
        in: path
        required: true
        schema:
          type: integer
      - name: id
        in: query
        required: true
        schema:
          type: integer
      - name: epoch
        in: query
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Success
          content: {}
  /partitions/{namespace}/{topic}/{partition}/replicas:
    post:
      summary: Update partition replicas
      description: Set the replica(s) of a partition.
      operationId: set_partition_replicas
      parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: partition
        in: path
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Success
          content: {}
  /partitions/{namespace}/{topic}/{partition}/transactions:
    get:
      summary: Get partition transactions
      description: Get all transactions for a partition.
      operationId: get_transactions
      parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: partition
        in: path
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transactions'
  /partitions/{namespace}/{topic}/{partition}/transfer_leadership:
    post:
      summary: Transfer leadership
      description: Transfer Raft group leadership of a topic to a specified partition.
      operationId: kafka_transfer_leadership
      parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: partition
        in: path
        required: true
        schema:
          type: integer
      - name: target
        in: query
        schema:
          type: integer
      responses:
        200:
          description: Success
          content: {}
  /partitions/{namespace}/{topic}/{partition}/unclean_abort_reconfiguration:
    post:
      tags:
      - Unstable APIs
      summary: Abort partition reconfiguration
      description: Forcibly abort an in-progress reconfiguration of a partition.
      operationId: unclean_abort_partition_reconfiguration
      parameters:
      - name: namespace
        in: path
        required: true
        schema:
          type: string
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: partition
        in: path
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Success
          content: {}
  /transaction/{transactional_id}/find_coordinator:
    get:
      summary: Get transaction coordinator
      description: Get transaction coordinator by transactional ID.
      operationId: find_coordinator
      parameters:
      - name: transactional_id
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/find_coordinator_reply'      
  /transaction/{transactional_id}/delete_partition:
    post:
      summary: Delete partition from transaction
      description: Delete a partition from a transaction.
      operationId: delete_partition
      parameters:
      - name: transactional_id
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: query
        required: true
        schema:
          type: string
      - name: topic
        in: query
        required: true
        schema:
          type: string
      - name: partition_id
        in: query
        required: true
        schema:
          type: integer
      - name: etag
        in: query
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Success
          content: {}
  /transactions:
    get:
      summary: List all transactions
      description: Get a list of all transactions.
      operationId: get_all_transactions
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/transaction_summary'
  /cluster/cancel_reconfigurations:
    post:
      summary: Cancel all partition reconfigurations
      description: Cancel all partition reconfigurations.
      operationId: cancel_all_partitions_reconfigurations
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cancel_all_partitions_reconfigurations'
  /cluster/health_overview:
    get:
      summary: Get cluster health overview
      description: Get cluster health overview.
      operationId: get_cluster_health_overview
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cluster_health_overview'
  /cluster/partition_balancer/status:
    get:
      summary: Get partition balancer status
      description: Get the status of the partition auto-balancer.
      operationId: get_partition_balancer_status
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_partition_balancer_status'
  /cluster/uuid:
    get:
      summary: Get cluster UUID
      description: Get the UUID of the cluster this node belongs to. (Note, this UUID
        is different than the configurable cluster identifier used in metrics.)
      operationId: get_cluster_uuid
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_cluster_uuid'
  /debug/self_test/start:
    post:
      summary: Start cluster self-test
      description: Start running the Redpanda cluster self-test.
      operationId: self_test_start
      responses:
        200:
          description: Success
          content: {}
  /debug/self_test/status:
    get:
      summary: Get cluster self-test status
      description: Get the status of the Redpanda cluster self-test.
      operationId: self_test_status
      responses:
        200:
          description: Success
          content: {}
  /debug/self_test/stop:
    post:
      summary: Stop cluster self-test
      description: Stop running the Redpanda cluster self-test.
      operationId: self_test_stop
      responses:
        200:
          description: Success
          content: {}
  /cloud_storage/initiate_topic_scan_and_recovery:
    get:
      summary: Get automated topic recovery status
      description: Query the status of automated topic recovery.
      operationId: query_automated_recovery
      responses:
        200:
          description: Success
          content: {}
    post:
      summary: Start topic scan and recovery
      description: Initiate a topic scan and start topic recovery.
      operationId: initiate_topic_scan_and_recovery
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: false
      responses:
        200:
          description: Topic scan was initiated successfully
          content: {}
      x-codegen-request-body-name: body
  /cloud_storage/status/{topic}/{partition}:
    get:
      summary: Get cloud storage status for a partition
      description: Get cloud storage status for a partition.
      operationId: get_partition_cloud_storage_status
      parameters:
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: partition
        in: path
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Success
          content: {}
  /cloud_storage/manifest/{topic}/{partition}:
    get:
      summary: Get in-memory partition manifest
      description: Get the in-memory partition manifest in JSON format.
      operationId: get_manifest
      parameters:
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: partition
        in: path
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Success
          content: {}
  /cloud_storage/lifecycle:
    get:
      summary: Get topic lifecycle markers
      description: Get lifecycle markers for topics pending deletion.
      operationId: get_cloud_storage_lifecycle
      responses:
        200:
          description: Success
  /cloud_storage/lifecycle/{topic}/{revision}:
    delete:
      summary: Drop topic lifecycle marker
      description: Forcibly drop a lifecycle marker for a topic. This may leave data behind in the Tiered Storage bucket.
      operationId: delete_cloud_storage_lifecycle
      parameters:
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: revision
        in: path
        required: true
        schema:
          type: integer     
      responses:
        200:
          description: Success
          content: {}
  /cloud_storage/sync_local_state/{topic}/{partition}:
    post:
      summary: Sync local state
      description: Synchronize the content of the bucket with local partition metadata.
      operationId: sync_local_state
      parameters:
      - name: topic
        in: path
        required: true
        schema:
          type: string
      - name: partition
        in: path
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Partition metadata is up to date
          content: {}
  /redpanda-services/restart:
    put:
      summary: Restart a redpanda service
      description: Restart a redpanda service.
      operationId: redpanda_services_restart
      parameters:
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        200:
          description: Restart successful
        400:
          description: Service name is required
        404:
          description: Service not found
        500:
          description: Internal server error          
components:
  schemas:
    cluster_ready_status:
      type: object
      properties:
        status:
          type: string
          enum: [ready, booting]
    scram_credential:
      type: object
      properties:
        algorithm:
          type: string
          enum: [SCRAM-SHA-256, SCRAM-SHA-512]
        password:
          type: string
    security_create_user:
      type: object
      properties:
        username:
          type: string
    cluster_config_properties:
      type: object
      description: Cluster configuration properties
      properties:
        abort_index_segment_size:
            description: Capacity (in number of txns) of an abort index segment
            type: integer
        abort_timed_out_transactions_interval_ms:
            description: How often look for the inactive transactions and abort them
            nullable: false
            type: integer
        admin_api_require_auth:
            description: Whether admin API clients must provide HTTP Basic authentication headers
            nullable: false
            type: boolean
        aggregate_metrics:
            description: Enable aggregations of metrics returned by the prometheus '/metrics' endpoint. Metric aggregation is performed by summing the values of samples by labels. Aggregations are performed where it makes sense by the shard and/or partition labels.
            nullable: false
            type: boolean
        alter_topic_cfg_timeout_ms:
            description: Time to wait for entries replication in controller log when executing alter configuration requst
            nullable: false
            type: integer
        append_chunk_size:
            description: Size of direct write operations to disk in bytes
            nullable: false
            type: integer
        auto_create_topics_enabled:
            description: Allow topic auto creation
            nullable: false
            type: boolean
        cloud_storage_access_key:
            description: AWS access key
            nullable: true
            type: string
        cloud_storage_api_endpoint:
            description: Optional API endpoint
            nullable: true
            type: string
        cloud_storage_api_endpoint_port:
            description: TLS port override
            nullable: false
            type: integer
        cloud_storage_azure_container:
            description: The name of the Azure container to use with Tiered Storage. Note that the container must belong to `cloud_storage_azure_storage_account`
            nullable: true
            type: string
        cloud_storage_azure_shared_key:
            description: The shared key to be used for Azure Shared Key authentication with the configured Azure storage account (see 'cloud_storage_azure_storage_account)'. Note that Redpanda expects this string to be Base64 encoded.
            nullable: true
            type: string
        cloud_storage_azure_storage_account:
            description: The name of the Azure storage account to use with Tiered Storage
            nullable: true
            type: string
        cloud_storage_bucket:
            description: AWS bucket that should be used to store data
            nullable: true
            type: string
        cloud_storage_cache_check_interval:
            description: Timeout to check if cache eviction should be triggered
            nullable: false
            type: integer
        cloud_storage_cache_size:
            description: Max size of archival cache
            nullable: false
            type: integer
        cloud_storage_credentials_source:
            description: The source of credentials to connect to cloud services
            nullable: false
            type: string
        cloud_storage_disable_tls:
            description: Disable TLS for all S3 connections
            nullable: false
            type: boolean
        cloud_storage_enable_compacted_topic_reupload:
            description: Enable re-uploading data for compacted topics
            nullable: false
            type: boolean
        cloud_storage_enable_remote_read:
            description: Default remote read config value for new topics
            nullable: false
            type: boolean
        cloud_storage_enable_remote_write:
            description: Default remote write value for new topics
            nullable: false
            type: boolean
        cloud_storage_enabled:
            description: Enable archival storage
            nullable: false
            type: boolean
        cloud_storage_housekeeping_interval_ms:
            description: Interval for cloud storage housekeeping tasks
            nullable: false
            type: integer
        cloud_storage_idle_timeout_ms:
            description: Timeout used to detect idle state of the cloud storage API. If no API requests are made for at least idle timeout milliseconds the cloud storage is considered idle.
            nullable: false
            type: integer
        cloud_storage_initial_backoff_ms:
            description: Initial backoff time for exponetial backoff algorithm (ms)
            nullable: false
            type: integer
        cloud_storage_manifest_upload_timeout_ms:
            description: Manifest upload timeout (ms)
            nullable: false
            type: integer
        cloud_storage_max_connection_idle_time_ms:
            description: Max https connection idle time (ms)
            nullable: false
            type: integer
        cloud_storage_max_connections:
            description: Max number of simultaneous connections to S3 per shard (includes connections used for both uploads and downloads)
            nullable: false
            type: integer
        cloud_storage_max_materialized_segments_per_shard:
            description: 'Maximum concurrent readers of remote data per CPU core.  If unset, value of `topic_partitions_per_shard` multiplied by 2 is used.'
            nullable: true
            type: integer
        cloud_storage_max_readers_per_shard:
            description: 'Maximum concurrent readers of remote data per CPU core.  If unset, value of `topic_partitions_per_shard` is used, i.e. one reader per partition if the shard is at its maximum partition capacity.'
            nullable: true
            type: integer
        cloud_storage_max_segments_pending_deletion_per_partition:
            description: 'The per-partition limit for the number of segments pending deletion from the cloud. Segments can be deleted due to retention or compaction. If this limit is breached and deletion fails, then segments will be orphaned in the cloud and will have to be removed manually'
            nullable: false
            type: integer
        cloud_storage_metadata_sync_timeout_ms:
            description: Timeout for SI metadata synchronization
            nullable: false
            type: integer
        cloud_storage_readreplica_manifest_sync_timeout_ms:
            description: Timeout to check if new data is available for partition in S3 for read replica
            nullable: false
            type: integer
        cloud_storage_recovery_temporary_retention_bytes_default:
            description: Retention in bytes for topics created during automated recovery
            nullable: false
            type: integer
        cloud_storage_region:
            description: AWS region that houses the bucket used for storage
            nullable: true
            type: string
        cloud_storage_roles_operation_timeout_ms:
            description: Timeout for IAM role related operations (ms)
            nullable: false
            type: integer
        cloud_storage_secret_key:
            description: AWS secret key
            nullable: true
            type: string
        cloud_storage_segment_max_upload_interval_sec:
            description: Time that segment can be kept locally without uploading it to the remote storage (sec)
            nullable: true
            type: integer
        cloud_storage_segment_size_min:
            description: 'Smallest acceptable segment size in the cloud storage. Default: cloud_storage_segment_size_target/2'
            nullable: true
            type: integer
        cloud_storage_segment_size_target:
            description: 'Desired segment size in the cloud storage. Default: segment.bytes'
            nullable: true
            type: integer
        cloud_storage_segment_upload_timeout_ms:
            description: Log segment upload timeout (ms)
            nullable: false
            type: integer
        cloud_storage_trust_file:
            description: Path to certificate that should be used to validate server certificate during TLS handshake
            nullable: true
            type: string
        cloud_storage_upload_ctrl_d_coeff:
            description: derivative coefficient for upload PID controller.
            nullable: false
            type: number
        cloud_storage_upload_ctrl_max_shares:
            description: maximum number of IO and CPU shares that archival upload can use
            nullable: false
            type: integer
        cloud_storage_upload_ctrl_min_shares:
            description: minimum number of IO and CPU shares that archival upload can use
            nullable: false
            type: integer
        cloud_storage_upload_ctrl_p_coeff:
            description: proportional coefficient for upload PID controller
            nullable: false
            type: number
        cloud_storage_upload_ctrl_update_interval_ms:
            description: ''
            nullable: false
            type: integer
        cloud_storage_upload_loop_initial_backoff_ms:
            description: Initial backoff interval when there is nothing to upload for a partition (ms)
            nullable: false
            type: integer
        cloud_storage_upload_loop_max_backoff_ms:
            description: Max backoff interval when there is nothing to upload for a partition (ms)
            nullable: false
            type: integer
        cluster_id:
            description: Cluster identifier
            nullable: true
            type: string
        compacted_log_segment_size:
            description: How large in bytes should each compacted log segment be (default 256MiB)
            nullable: false
            type: integer
        compaction_ctrl_backlog_size:
            description: 'target backlog size for compaction controller. if not set compaction target compaction backlog would be equal to '
            nullable: true
            type: integer
        compaction_ctrl_d_coeff:
            description: derivative coefficient for compaction PID controller.
            nullable: false
            type: number
        compaction_ctrl_i_coeff:
            description: integral coefficient for compaction PID controller.
            nullable: false
            type: number
        compaction_ctrl_max_shares:
            description: maximum number of IO and CPU shares that compaction process can use
            nullable: false
            type: integer
        compaction_ctrl_min_shares:
            description: minimum number of IO and CPU shares that compaction process can use
            nullable: false
            type: integer
        compaction_ctrl_p_coeff:
            description: proportional coefficient for compaction PID controller. This has to be negative since compaction backlog should decrease when number of compaction shares increases
            nullable: false
            type: number
        compaction_ctrl_update_interval_ms:
            description: ''
            nullable: false
            type: integer
        controller_backend_housekeeping_interval_ms:
            description: Interval between iterations of controller backend housekeeping loop
            nullable: false
            type: integer
        controller_log_accummulation_rps_capacity_acls_and_users_operations:
            description: Maximum capacity of rate limit accumulationin controller acls and users operations limit
            nullable: true
            type: integer
        controller_log_accummulation_rps_capacity_configuration_operations:
            description: Maximum capacity of rate limit accumulationin controller configuration operations limit
            nullable: true
            type: integer
        controller_log_accummulation_rps_capacity_move_operations:
            description: Maximum capacity of rate limit accumulationin controller move operations limit
            nullable: true
            type: integer
        controller_log_accummulation_rps_capacity_node_management_operations:
            description: Maximum capacity of rate limit accumulationin controller node management operations limit
            nullable: true
            type: integer
        controller_log_accummulation_rps_capacity_topic_operations:
            description: Maximum capacity of rate limit accumulationin controller topic operations limit
            nullable: true
            type: integer
        coproc_max_batch_size:
            description: Maximum amount of bytes to read from one topic read
            nullable: false
            type: integer
        coproc_max_inflight_bytes:
            description: Maximum amountt of inflight bytes when sending data to wasm engine
            nullable: false
            type: integer
        coproc_max_ingest_bytes:
            description: Maximum amount of data to hold from input logs in memory
            nullable: false
            type: integer
        coproc_offset_flush_interval_ms:
            description: Interval for which all coprocessor offsets are flushed to disk
            nullable: false
            type: integer
        create_topic_timeout_ms:
            description: Timeout (ms) to wait for new topic creation
            nullable: false
            type: integer
        default_num_windows:
            description: Default number of quota tracking windows
            nullable: false
            type: integer
        default_topic_partitions:
            description: Default number of partitions per topic
            nullable: false
            type: integer
        default_topic_replications:
            description: Default replication factor for new topics
            nullable: false
            type: integer
        default_window_sec:
            description: Default quota tracking window size in milliseconds
            nullable: false
            type: integer
        delete_retention_ms:
            description: delete segments older than this - default 1 week
            nullable: true
            type: integer
        disable_batch_cache:
            description: Disable batch cache in log manager
            nullable: false
            type: boolean
        disable_metrics:
            description: Disable registering metrics exposed on the internal metrics endpoint (/metrics)
            nullable: false
            type: boolean
        disable_public_metrics:
            description: Disable registering metrics exposed on the public metrics endpoint (/public_metrics)
            nullable: false
            type: boolean
        election_timeout_ms:
            description: Election timeout expressed in milliseconds
            nullable: false
            type: integer
        enable_controller_log_rate_limiting:
            description: Enables limiting of controller log write rate
            nullable: false
            type: boolean
        enable_coproc:
            description: Enable coprocessing mode
            nullable: false
            type: boolean
        enable_idempotence:
            description: Enable idempotent producer
            nullable: false
            type: boolean
        enable_leader_balancer:
            description: Enable automatic leadership rebalancing
            nullable: false
            type: boolean
        enable_metrics_reporter:
            description: Enable cluster metrics reporter
            nullable: false
            type: boolean
        enable_pid_file:
            description: Enable pid file. You probably don't want to change this.
            nullable: false
            type: boolean
        enable_rack_awareness:
            description: Enables rack-aware replica assignment
            nullable: false
            type: boolean
        enable_sasl:
            description: 'Enable SASL authentication for Kafka connections, authorization is required. see also `kafka_enable_authorization`'
            nullable: false
            type: boolean
        enable_transactions:
            description: Enable transactions
            nullable: false
            type: boolean
        features_auto_enable:
            description: Whether new feature flags may auto-activate after upgrades (true) or must wait for manual activation via the admin API (false)
            nullable: false
            type: boolean
        fetch_max_bytes:
            description: Maximum number of bytes returned in fetch request
            nullable: false
            type: integer
        fetch_reads_debounce_timeout:
            description: Time to wait for next read in fetch request when requested min bytes wasn't reached
            nullable: false
            type: integer
        fetch_session_eviction_timeout_ms:
            description: Minimum time before which unused session will get evicted from sessions. Maximum time after which inactive session will be deleted is two time given configuration valuecache
            nullable: false
            type: integer
        full_raft_configuration_recovery_pattern:
            description: Recover raft configuration on start for NTPs matching pattern
            nullable: false
            type: array
            items:
                type: string
        group_initial_rebalance_delay:
            description: Extra delay (ms) added to rebalance phase to wait for new members
            nullable: false
            type: integer
        group_max_session_timeout_ms:
            description: 'The maximum allowed session timeout for registered consumers. Longer timeouts give consumers more time to process messages in between heartbeats at the cost of a longer time to detect failures. '
            nullable: false
            type: integer
        group_min_session_timeout_ms:
            description: 'The minimum allowed session timeout for registered consumers. Shorter timeouts result in quicker failure detection at the cost of more frequent consumer heartbeating, which can overwhelm broker resources.'
            nullable: false
            type: integer
        group_new_member_join_timeout:
            description: Timeout for new member joins
            nullable: false
            type: integer
        group_offset_retention_check_ms:
            description: How often the system should check for expired group offsets.
            nullable: false
            type: integer
        group_offset_retention_sec:
            description: Consumer group offset retention seconds. Offset retention can be disabled by setting this value to null.
            nullable: true
            type: integer
        group_topic_partitions:
            description: Number of partitions in the internal group membership topic
            nullable: false
            type: integer
        health_manager_tick_interval:
            description: How often the health manager runs
            nullable: false
            type: integer
        health_monitor_max_metadata_age:
            description: Max age of metadata cached in the health monitor of non controller node
            nullable: false
            type: integer
        id_allocator_batch_size:
            description: Id allocator allocates messages in batches (each batch is a one log record) and then serves requests from memory without touching the log until the batch is exhausted.
            nullable: false
            type: integer
        id_allocator_log_capacity:
            description: Capacity of the id_allocator log in number of messages. Once it reached id_allocator_stm should compact the log.
            nullable: false
            type: integer
        internal_topic_replication_factor:
            description: Target replication factor for internal topics
            nullable: false
            type: integer
        join_retry_timeout_ms:
            description: Time between cluster join retries in milliseconds
            nullable: false
            type: integer
        kafka_admin_topic_api_rate:
            description: Target quota rate (partition mutations per default_window_sec)
            nullable: true
            type: integer
        kafka_batch_max_bytes:
            description: Maximum size of a batch processed by server. If batch is compressed the limit applies to compressed batch size
            nullable: false
            type: integer
        kafka_client_group_byte_rate_quota:
            description: Per-group target produce quota byte rate (bytes per second). Client is considered part of the group if client_id contains clients_prefix
            nullable: false
            type: array
            items:
                type: integer
        kafka_client_group_fetch_byte_rate_quota:
            description: Per-group target fetch quota byte rate (bytes per second). Client is considered part of the group if client_id contains clients_prefix
            nullable: false
            type: array
            items:
                type: integer
        kafka_connection_rate_limit:
            description: Maximum connections per second for one core
            nullable: true
            type: integer
        kafka_connection_rate_limit_overrides:
            description: Overrides for specific ips for maximum connections per second for one core
            nullable: false
            type: array
            items:
                type: string
        kafka_connections_max:
            description: Maximum number of Kafka client connections per broker
            nullable: true
            type: integer
        kafka_connections_max_overrides:
            description: 'Per-IP overrides of kafka connection count limit, list of <ip>:<count> strings'
            nullable: false
            type: array
            items:
                type: string
        kafka_connections_max_per_ip:
            description: 'Maximum number of Kafka client connections from each IP address, per broker'
            nullable: true
            type: integer
        kafka_enable_authorization:
            description: 'Enable authorization for Kafka connections. Values:- `nil`: Ignored. Authorization is enabled with `enable_sasl: true`; `true`: authorization is required; `false`: authorization is disabled. See also: `enable_sasl` and `kafka_api[].authentication_method`'
            nullable: true
            type: boolean
        kafka_group_recovery_timeout_ms:
            description: Kafka group recovery timeout expressed in milliseconds
            nullable: false
            type: integer
        kafka_max_bytes_per_fetch:
            description: 'Limit fetch responses to this many bytes, even if total of partition bytes limits is higher'
            nullable: false
            type: integer
        kafka_mtls_principal_mapping_rules:
            description: Principal Mapping Rules for mTLS Authentication on the Kafka API
            nullable: true
            type: array
            items:
                type: string
        kafka_nodelete_topics:
            description: Prevents the topics in the list from being deleted via the kafka api
            nullable: false
            type: array
            items:
                type: string
        kafka_noproduce_topics:
            description: Prevents the topics in the list from having message produced to them via the kafka api
            nullable: false
            type: array
            items:
                type: string
        kafka_qdc_depth_alpha:
            description: Smoothing factor for kafka queue depth control depth tracking.
            nullable: false
            type: number
        kafka_qdc_depth_update_ms:
            description: Update frequency for kafka queue depth control.
            nullable: false
            type: integer
        kafka_qdc_enable:
            description: Enable kafka queue depth control.
            nullable: false
            type: boolean
        kafka_qdc_idle_depth:
            description: Queue depth when idleness is detected in kafka queue depth control.
            nullable: false
            type: integer
        kafka_qdc_latency_alpha:
            description: Smoothing parameter for kafka queue depth control latency tracking.
            nullable: false
            type: number
        kafka_qdc_max_depth:
            description: Maximum queue depth used in kafka queue depth control.
            nullable: false
            type: integer
        kafka_qdc_max_latency_ms:
            description: Max latency threshold for kafka queue depth control depth tracking.
            nullable: false
            type: integer
        kafka_qdc_min_depth:
            description: Minimum queue depth used in kafka queue depth control.
            nullable: false
            type: integer
        kafka_qdc_window_count:
            description: Number of windows used in kafka queue depth control latency tracking.
            nullable: false
            type: integer
        kafka_qdc_window_size_ms:
            description: Window size for kafka queue depth control latency tracking.
            nullable: false
            type: integer
        kafka_quota_balancer_min_shard_thoughput_bps:
            description: 'The lowest value of the throughput quota a shard can get in the process of quota balancing, in bytes/s. 0 means there is no minimum.'
            nullable: false
            type: integer
        kafka_quota_balancer_min_shard_thoughput_ratio:
            description: 'The lowest value of the throughput quota a shard can get in the process of quota balancing, expressed as a ratio of default shard quota. 0 means there is no minimum, 1 means no quota can be taken away by the balancer.'
            nullable: false
            type: number
        kafka_quota_balancer_node_period_ms:
            description: 'Intra-node throughput quota balancer invocation period, in milliseconds. Value of 0 disables the balancer and makes all the thoughput quotas immutable.'
            nullable: false
            type: integer
        kafka_quota_balancer_window_ms:
            description: 'Time window used to average current throughput measurement for quota balancer, in milliseconds'
            nullable: false
            type: integer
        kafka_request_max_bytes:
            description: Maximum size of a single request processed via Kafka API
            nullable: false
            type: integer
        kafka_rpc_server_stream_recv_buf:
            description: Userspace receive buffer max size in bytes
            nullable: true
            type: integer
        kafka_rpc_server_tcp_recv_buf:
            description: Kafka server TCP receive buffer size in bytes.
            nullable: true
            type: integer
        kafka_rpc_server_tcp_send_buf:
            description: Kafka server TCP transmit buffer size in bytes.
            nullable: true
            type: integer
        kafka_throughput_limit_node_in_bps:
            description: 'Node wide throughput ingress limit - maximum kafka traffic throughput allowed on the ingress side of each node, in bytes/s. Default is no limit.'
            nullable: true
            type: integer
        kafka_throughput_limit_node_out_bps:
            description: 'Node wide throughput egress limit - maximum kafka traffic throughput allowed on the egress side of each node, in bytes/s. Default is no limit.'
            nullable: true
            type: integer
        kvstore_flush_interval:
            description: Key-value store flush interval (ms)
            nullable: false
            type: integer
        kvstore_max_segment_size:
            description: Key-value maximum segment size (bytes)
            nullable: false
            type: integer
        leader_balancer_idle_timeout:
            description: Leadership rebalancing idle timeout
            nullable: false
            type: integer
        leader_balancer_mute_timeout:
            description: Leadership rebalancing mute timeout
            nullable: false
            type: integer
        leader_balancer_transfer_limit_per_shard:
            description: Per shard limit for in progress leadership transfers
            nullable: false
            type: integer
        legacy_group_offset_retention_enabled:
            description: 'Group offset retention is enabled by default in versions of Redpanda >= 23.1. To enable offset retention after upgrading from an older version set this option to true.'
            nullable: false
            type: boolean
        log_cleanup_policy:
            description: Default topic cleanup policy
            nullable: false
            type: string
        log_compaction_interval_ms:
            description: How often do we trigger background compaction
            nullable: false
            type: integer
        log_compression_type:
            description: Default topic compression type
            nullable: false
            type: string
        log_message_timestamp_type:
            description: Default topic messages timestamp type
            nullable: false
            type: string
        log_segment_ms:
            description: Default log segment lifetime in ms for topics which do not set segment.ms
            nullable: true
            type: integer
        log_segment_ms_max:
            description: 'Upper bound on topic segment.ms: higher values will be clamped to this value'
            nullable: false
            type: integer
        log_segment_ms_min:
            description: 'Lower bound on topic segment.ms: lower values will be clamped to this value'
            nullable: false
            type: integer
        log_segment_size:
            description: Default log segment size in bytes for topics which do not set segment.bytes
            nullable: false
            type: integer
        log_segment_size_jitter_percent:
            description: Random variation to the segment size limit used for each partition
            nullable: false
            type: integer
        log_segment_size_max:
            description: 'Upper bound on topic segment.bytes: higher values will be clamped to this limit'
            nullable: true
            type: integer
        log_segment_size_min:
            description: 'Lower bound on topic segment.bytes: lower values will be clamped to this limit'
            nullable: true
            type: integer
        max_compacted_log_segment_size:
            description: Max compacted segment size after consolidation
            nullable: false
            type: integer
        max_concurrent_producer_ids:
            description: Max cache size for pids which rm_stm stores inside internal state. In overflow rm_stm will delete old pids and clear their status
            nullable: false
            type: integer
        max_kafka_throttle_delay_ms:
            description: Fail-safe maximum throttle delay on kafka requests
            nullable: false
            type: integer
        members_backend_retry_ms:
            description: 'Time between members backend reconciliation loop retries '
            nullable: false
            type: integer
        metadata_dissemination_interval_ms:
            description: Interaval for metadata dissemination batching
            nullable: false
            type: integer
        metadata_dissemination_retries:
            description: Number of attempts of looking up a topic's meta data like shard before failing a request
            nullable: false
            type: integer
        metadata_dissemination_retry_delay_ms:
            description: Delay before retry a topic lookup in a shard or other meta tables
            nullable: false
            type: integer
        metadata_status_wait_timeout_ms:
            description: Maximum time to wait in metadata request for cluster health to be refreshed
            nullable: false
            type: integer
        metrics_reporter_report_interval:
            description: cluster metrics reporter report interval
            nullable: false
            type: integer
        metrics_reporter_tick_interval:
            description: Cluster metrics reporter tick interval
            nullable: false
            type: integer
        metrics_reporter_url:
            description: cluster metrics reporter url
            nullable: false
            type: string
        node_isolation_heartbeat_timeout:
            description: How long after the last heartbeat request a node will wait before considering itself to be isolated
            nullable: false
            type: integer
        node_management_operation_timeout_ms:
            description: Timeout for executing node management operations
            nullable: false
            type: integer
        node_status_interval:
            description: Time interval between two node status messages. Node status messages establish liveness status outside of the Raft protocol.
            nullable: false
            type: integer
        partition_autobalancing_concurrent_moves:
            description: Number of partitions that can be reassigned at once
            nullable: false
            type: integer
        partition_autobalancing_max_disk_usage_percent:
            description: Disk usage threshold that triggers moving partitions from the node
            nullable: false
            type: integer
        partition_autobalancing_mode:
            description: Partition autobalancing mode
            nullable: false
            type: string
        partition_autobalancing_movement_batch_size_bytes:
            description: Total size of partitions that autobalancer is going to move in one batch
            nullable: false
            type: integer
        partition_autobalancing_node_availability_timeout_sec:
            description: Node unavailability timeout that triggers moving partitions from the node
            nullable: false
            type: integer
        partition_autobalancing_tick_interval_ms:
            description: Partition autobalancer tick interval
            nullable: false
            type: integer
        quota_manager_gc_sec:
            description: Quota manager GC frequency in milliseconds
            nullable: false
            type: integer
        raft_heartbeat_disconnect_failures:
            description: After how many failed heartbeats to forcibly close an unresponsive TCP connection.  Set to 0 to disable force disconnection.
            nullable: false
            type: integer
        raft_heartbeat_interval_ms:
            description: Milliseconds for raft leader heartbeats
            nullable: false
            type: integer
        raft_heartbeat_timeout_ms:
            description: raft heartbeat RPC timeout
            nullable: false
            type: integer
        raft_io_timeout_ms:
            description: Raft I/O timeout
            nullable: false
            type: integer
        raft_learner_recovery_rate:
            description: Raft learner recovery rate limit in bytes per sec
            nullable: false
            type: integer
        raft_max_concurrent_append_requests_per_follower:
            description: Maximum number of concurrent append entries requests sent by leader to one follower
            nullable: false
            type: integer
        raft_max_recovery_memory:
            description: 'Max memory that can be used for reads in raft recovery process by default 15% of total memory'
            nullable: true
            type: integer
        raft_recovery_default_read_size:
            description: default size of read issued during raft follower recovery
            nullable: false
            type: integer
        raft_replicate_batch_window_size:
            description: Max size of requests cached for replication
            nullable: false
            type: integer
        raft_smp_max_non_local_requests:
            description: 'Maximum number of x-core requests pending in Raft seastar::smp group. (for more details look at `seastar::smp_service_group` documentation)'
            nullable: true
            type: integer
        raft_timeout_now_timeout_ms:
            description: Timeout for a timeout now request
            nullable: false
            type: integer
        raft_transfer_leader_recovery_timeout_ms:
            description: Timeout waiting for follower recovery when transferring leadership
            nullable: false
            type: integer
        readers_cache_eviction_timeout_ms:
            description: Duration after which inactive readers will be evicted from cache
            nullable: false
            type: integer
        reclaim_batch_cache_min_free:
            description: Free memory limit that will be kept by batch cache background reclaimer
            nullable: false
            type: integer
        reclaim_growth_window:
            description: Length of time in which reclaim sizes grow
            nullable: false
            type: integer
        reclaim_max_size:
            description: Maximum batch cache reclaim size
            nullable: false
            type: integer
        reclaim_min_size:
            description: Minimum batch cache reclaim size
            nullable: false
            type: integer
        reclaim_stable_window:
            description: Length of time above which growth is reset
            nullable: false
            type: integer
        recovery_append_timeout_ms:
            description: Timeout for append entries requests issued while updating stale follower
            nullable: false
            type: integer
        release_cache_on_segment_roll:
            description: Free cache when segments roll
            nullable: false
            type: boolean
        replicate_append_timeout_ms:
            description: Timeout for append entries requests issued while replicating entries
            nullable: false
            type: integer
        retention_bytes:
            description: Default max bytes per partition on disk before triggering a compaction
            nullable: true
            type: integer
        retention_local_target_bytes_default:
            description: Local retention size target for partitions of topics with cloud storage write enabled
            nullable: true
            type: integer
        retention_local_target_ms_default:
            description: Local retention time target for partitions of topics with cloud storage write enabled
            nullable: false
            type: integer
        rm_sync_timeout_ms:
            description: Time to wait state catch up before rejecting a request
            nullable: false
            type: integer
        rpc_server_listen_backlog:
            description: TCP connection queue length for Kafka server and internal RPC server
            nullable: true
            type: integer
        rpc_server_tcp_recv_buf:
            description: Internal RPC TCP receive buffer size in bytes.
            nullable: true
            type: integer
        rpc_server_tcp_send_buf:
            description: Internal RPC TCP transmit buffer size in bytes.
            nullable: true
            type: integer
        rps_limit_acls_and_users_operations:
            description: Rate limit for controller acls and users operations
            nullable: false
            type: integer
        rps_limit_configuration_operations:
            description: Rate limit for controller configuration operations
            nullable: false
            type: integer
        rps_limit_move_operations:
            description: Rate limit for controller move operations
            nullable: false
            type: integer
        rps_limit_node_management_operations:
            description: Rate limit for controller node management operations
            nullable: false
            type: integer
        rps_limit_topic_operations:
            description: Rate limit for controller topic operations
            nullable: false
            type: integer
        sasl_kerberos_keytab:
            description: The location of the Kerberos keytab file for Redpanda
            nullable: false
            type: string
        sasl_kerberos_principal:
            description: The primary of the Kerberos Service Principal Name (SPN) for Redpanda
            nullable: false
            type: string
        sasl_kerberos_principal_mapping:
            description: Rules for mapping Kerberos Service Principal Name (SPN) to Redpanda
            nullable: false
            type: array
            items:
                type: string
        sasl_mechanisms:
            description: A list of supported SASL mechanisms. `SCRAM` and `GSSAPI` are allowed.
            nullable: false
            type: array
            items:
                type: string
        segment_appender_flush_timeout_ms:
            description: Maximum delay until buffered data is written
            nullable: false
            type: integer
        segment_fallocation_step:
            description: Size for segments fallocation
            nullable: false
            type: integer
        seq_table_min_size:
            description: Minimum size of the seq table non affected by compaction
            nullable: false
            type: integer
        storage_compaction_index_memory:
            description: Maximum number of bytes that may be used on each shard by compaction index writers
            nullable: false
            type: integer
        storage_max_concurrent_replay:
            description: Maximum number of partitions' logs that will be replayed concurrently at startup, or flushed concurrently on shutdown.
            nullable: false
            type: integer
        storage_min_free_bytes:
            description: Threshold of minimum bytes free space before rejecting producers.
            nullable: false
            type: integer
        storage_read_buffer_size:
            description: 'Size of each read buffer (one per in-flight read, per log segment)'
            nullable: false
            type: integer
        storage_read_readahead_count:
            description: How many additional reads to issue ahead of current read location
            nullable: false
            type: integer
        storage_space_alert_free_threshold_bytes:
            description: Threshold of minimim bytes free space before setting storage space alert
            nullable: false
            type: integer
        storage_space_alert_free_threshold_percent:
            description: Threshold of minimim percent free space before setting storage space alert
            nullable: false
            type: integer
        storage_strict_data_init:
            description: Requires that an empty file named `.redpanda_data_dir` be present in the data directory. Redpanda will refuse to start if it is not found.
            nullable: false
            type: boolean
        storage_target_replay_bytes:
            description: 'Target bytes to replay from disk on startup after clean shutdown: controls frequency of snapshots and checkpoints'
            nullable: false
            type: integer
        superusers:
            description: List of superuser usernames
            nullable: false
            type: array
            items:
                type: string
        target_fetch_quota_byte_rate:
            description: Target fetch size quota byte rate (bytes per second) - disabled default
            nullable: true
            type: integer
        target_quota_byte_rate:
            description: Target request size quota byte rate (bytes per second) - 2GB default
            nullable: false
            type: integer
        tm_sync_timeout_ms:
            description: Time to wait state catch up before rejecting a request
            nullable: false
            type: integer
        topic_fds_per_partition:
            description: Required file handles per partition when creating topics
            nullable: true
            type: integer
        topic_memory_per_partition:
            description: Required memory per partition when creating topics
            nullable: true
            type: integer
        topic_partitions_per_shard:
            description: Maximum number of partitions which may be allocated to one shard (CPU core)
            nullable: false
            type: integer
        topic_partitions_reserve_shard0:
            description: 'Reserved partition slots on shard (CPU core) 0 on each node.  If this is >= topic_partitions_per_core, no data partitions will be scheduled on shard 0'
            nullable: false
            type: integer
        transaction_coordinator_cleanup_policy:
            description: Cleanup policy for a transaction coordinator topic
            nullable: false
            type: string
        transaction_coordinator_delete_retention_ms:
            description: delete segments older than this - default 1 week
            nullable: false
            type: integer
        transaction_coordinator_log_segment_size:
            description: How large in bytes should each log segment be (default 1G)
            nullable: false
            type: integer
        transactional_id_expiration_ms:
            description: Producer ids are expired once this time has elapsed after the last write with the given producer id.
            nullable: false
            type: integer
        tx_log_stats_interval_s:
            description: 'How often to log per partition tx stats, works only with debug logging enabled.'
            nullable: false
            type: integer
        tx_timeout_delay_ms:
            description: Delay before scheduling next check for timed out transactions
            nullable: false
            type: integer
        wait_for_leader_timeout_ms:
            description: Timeout (ms) to wait for leadership in metadata cache
            nullable: false
            type: integer
        zstd_decompress_workspace_bytes:
            description: Size of the zstd decompression workspace
            nullable: false
            type: integer
    ntp:
      type: object
      description: Namespace, Topic, Partition ID tuple
      properties:
        ns:
          type: string
          description: Namespace
        topic:
          type: string
          description: Topic
        partition:
          type: integer
          description: Partition ID
    find_coordinator_reply:
      type: object
      properties:
        coordinator:
          type: integer
          description: Node ID
        ntp:
          $ref: '#/components/schemas/ntp'
          description: NTP
        ec:
          type: integer
          description: Error code
    partition_cloud_storage_status:
      type: object
      properties:
        cloud_storage_mode:
          type: string
          description: The partition's cloud storage mode (`disabled`, `write_only`, `read_only`, `full`, or `read_replica`).
        ms_since_last_manifest_upload:
          type: integer
          description: Delta in milliseconds since the last upload of the partition's manifest
        ms_since_last_segment_upload:
          type: integer
          description: Delta in milliseconds since the last segment upload for the partition
        ms_since_last_manifest_sync:
          type: integer
          description: Delta in milliseconds since the last manifest sync. Only present for read replicas.
        metadata_update_pending:
          type: boolean
          description: If `true`, the remote metadata may not yet include all segments that have been uploaded
        total_log_size_bytes:
          type: integer
          description: Total size of the log for the partition (overlap between local and cloud log is excluded) 
        cloud_log_size_bytes:
          type: integer
          description: Total size of the addressable cloud log for the partition
        local_log_size_bytes:
          type: integer
          description: Total size of the addressable local log for the partition
        cloud_log_segment_count:
          type: integer
          description: Number of segments in the local log
        cloud_log_start_offset:
          type: integer
          nullable: true
          description: The first Kafka offset accessible from the cloud (inclusive)
        cloud_log_last_offset:
          type: integer
          nullable: true
          description: The last Kafka offset accessible from the cloud (inclusive)
        local_log_start_offset:
          type: integer
          nullable: true
          description: The first Kafka offset accessible locally (inclusive)
        local_log_last_offset:
          type: integer
          nullable: true
          description: The last Kafka offset accessible locally (inclusive)   
    lifecycle_marker:
      type: object
      properties:
        ns:
          type: string
        topic:
          type: string
        revision_id:
          type: integer
        status:
          type: string
    get_lifecycle_response:
      type: object
      description: Response body of GET to the `cloud_storage/lifecycle` endpoint
      properties:
        markers:
          type: array
          items:
            $ref: '#/components/schemas/lifecycle_marker'    
    cluster_config_property_metadata:
      type: object
      properties:
        description:
          type: string
          description: Human readable description of property's purpose
        enum_values:
          type: array
          description: Possible values of the property (in string-ized form)
          items:
            type: string
        example:
          type: string
          description: Example of correct syntax for this property
        is_secret:
          type: boolean
          description: Whether this property is a secret (i.e. should not be logged)
        items:
          $ref: '#/components/schemas/cluster_config_property_metadata_items'
        aliases:
          type: array
          description: List of legacy names for the property. Property may be set using these names, but will always appear in GET requests via its primary name.
          items:
            type: string
        needs_restart:
          type: boolean
          description: Whether changes to this property will require a restart of
            redpanda nodes
        nullable:
          type: boolean
          description: Whether this setting may be set to null
        type:
          type: string
          description: Expected syntax of the property value
        units:
          type: string
          description: If applicable, the units of the property (e.g. ms, bytes)
        visibility:
          type: string
          description: One of user|tunable|deprecated
      description: A single configuration property's metadata
    cluster_config_property_metadata_items:
      type: object
      properties:
        type:
          type: string
          description: A scalar type name, like 'string'
      description: The type within 'items' for array properties
    cluster_config_status:
      type: object
      properties:
        config_version:
          type: integer
          description: Configuration version number, for cross referencing with PUT
            results
          format: int64
        invalid:
          type: array
          description: List of properties with invalid values
          items:
            type: string
        node_id:
          type: integer
          description: node id
          format: int64
        restart:
          type: boolean
          description: Restart required to apply pending configuration
        unknown:
          type: array
          description: List of properties unknown to this node
          items:
            type: string
      description: Per-node configuration status
    cluster_config_write_result:
      type: object
      properties:
        config_version:
          type: integer
          description: Configuration version number, for cross referencing with node
            config status
          format: int64
      description: Result of writing changes to cluster configuration
    feature_state:
      type: object
      properties:
        name:
          type: string
        state:
          type: string
          enum:
          - active
          - preparing
          - available
          - unavailable
          - disabled
        was_active:
          type: boolean
          description: Whether the feature has ever been active, i.e. data depending
            on this feature may have been written to disk
      description: State of one feature (active, available etc)
    features_response:
      type: object
      properties:
        cluster_version:
          type: integer
          description: Logical version of cluster. Should equal `latest_node_version` if cluster is not currently being upgraded.
          format: int64
        features:
          type: array
          description: list of feature_state for each feature
          items:
            $ref: '#/components/schemas/feature_state'
        original_cluster_version:
          type: integer
          description: Logical version at time of cluster creation. Should equal `latest_node_version` if cluster is not currently being upgraded.
          format: int64
        node_earliest_version:
          type: integer
          format: int64
          description: Earliest logical version supported by the node answering this request
        node_latest_version:
          type: integer
          format: int64
          description: Latest logical version supported by the node answering this request
      description: Describe available features in this redpanda cluster
    license_contents:
      type: object
      properties:
        expires:
          type: integer
          description: Expiration date of the license in Unix epoch seconds
          format: int64
        format_version:
          type: integer
          description: license schema version evolution number
          format: int32
        org:
          type: string
          description: client the license was generated for
        sha256:
          type: string
          description: Checksum (sha256) of the raw license data
        type:
          type: string
          description: type of license, currently only free_trial or enterprise
      description: Parameters belonging to a valid, signed redpanda license
    license_response:
      type: object
      properties:
        license:
          $ref: '#/components/schemas/license_contents'
        loaded:
          type: boolean
          description: true if a non-expired license is loaded
      description: Describe properties of currently loaded license file
    broker:
      type: object
      properties:
        disk_space:
          type: array
          description: Array of disk space information per directory path. If disk
            space information is not available the array may be empty
          items:
            $ref: '#/components/schemas/disk_space_info'
        is_alive:
          type: boolean
          description: is node seen as alive by the cluster
        maintenance_status:
          $ref: '#/components/schemas/maintenance_status'
        membership_status:
          type: string
          description: Broker membership status
        node_id:
          type: integer
          description: node id
          format: int64
        num_cores:
          type: integer
          description: cores
          format: int64
        rack:
          type: string
          description: rack id
        internal_rpc_address:
          type: string
          description: Internal RPC address (usually, but not necessarily, a hostname)
        internal_rpc_port:
          type: integer
          description: Internal RPC port
        version:
          type: string
          description: Redpanda version
      description: Broker information
    broker_shard:
      type: object
      properties:
        core:
          type: integer
          description: id of a core on a given node
          format: int32
        node_id:
          type: integer
          description: id of a node
          format: int32
      description: Replica placement
    cluster_view:
      type: object
      properties:
        brokers:
          type: array
          items:
            $ref: '#/components/schemas/broker'
        version:
          type: integer
          description: cluster view version
          format: int64
      description: Cluster view
    decommission_status:
      type: object
      properties:
        finished:
          type: boolean
          description: indicate if decommissioning is finished
        partitions:
          type: array
          description: Array of partition reconfiguration statues
          items:
            $ref: '#/components/schemas/partition_reconfiguration_status'
        replicas_left:
          type: integer
          description: number of replicas left on a node
          format: int64
      description: Node decommissioning status
    disk_space_info:
      type: object
      properties:
        free:
          type: integer
          description: free space bytes
          format: int64
        path:
          type: string
          description: data directory path
        total:
          type: integer
          description: total space bytes
          format: int64
    maintenance_status:
      type: object
      properties:
        draining:
          type: boolean
          description: in maintenance state
        eligible:
          type: integer
          description: eligible partition count
          format: int64
        errors:
          type: boolean
          description: drain errors
        failed:
          type: integer
          description: failed transfer partition count
          format: int64
        finished:
          type: boolean
          description: drain finished
        partitions:
          type: integer
          description: partition count
          format: int64
        transferring:
          type: integer
          description: transferring partition count
          format: int64
      description: Drain status
    partition_reconfiguration_status:
      type: object
      properties:
        bytes_left_to_move:
          type: integer
          description: bytes left to move to new replica
          format: int64
        bytes_moved:
          type: integer
          description: bytes moved to target broker
          format: int64
        moving_to:
          $ref: '#/components/schemas/broker_shard'
        ns:
          type: string
          description: namespace
        partition:
          type: integer
          description: partition
          format: int32
        partition_size:
          type: integer
          description: current size of partition
          format: int64
        topic:
          type: string
          description: topic
      description: Partition reconfiguration status
    assignment:
      type: object
      properties:
        core:
          type: integer
          description: core
          format: int64
        node_id:
          type: integer
          description: node id
          format: int64
      description: Replica assignment
    partition:
      type: object
      properties:
        leader_id:
          type: integer
          description: leader node id
          format: int64
        ns:
          type: string
          description: namespace
        partition_id:
          type: integer
          description: partition
          format: int64
        raft_group_id:
          type: integer
          description: partition raft group id
          format: int64
        replicas:
          type: array
          description: Replica assignments
          items:
            $ref: '#/components/schemas/assignment'
        status:
          type: string
          description: status
        topic:
          type: string
          description: topic
      description: Partition details
    partition_result:
      type: object
      properties:
        ns:
          type: string
          description: Namespace
        partition:
          type: integer
          description: Partition id
          format: int64
        result:
          type: string
          description: Status of operation
        topic:
          type: string
          description: Topic
      description: Partition result
    partition_summary:
      type: object
      properties:
        core:
          type: integer
          description: core
          format: int64
        leader:
          type: integer
          description: Latest known leader (or -1 if unknown)
          format: int64
        materialized:
          type: boolean
          description: materialized
        ns:
          type: string
          description: namespace
        partition_id:
          type: integer
          description: partition
          format: int64
        topic:
          type: string
          description: topic
      description: Partition summary
    partitions_local_summary:
      type: object
      properties:
        count:
          type: integer
          description: Number of partitions with a replica on this node
          format: int64
        leaderless:
          type: integer
          description: Number of partitions with a replica on this node that report
            no known raft leader
          format: int64
        under_replicated:
          type: integer
          description: Number of partitions with leadership on this node, reporting
            one or more under-replicated followers
          format: int64
      description: Summarize status of partitions with a replica on this node
    producer_identity:
      type: object
      properties:
        epoch:
          type: integer
          description: Producer epoch
          format: int64
        id:
          type: integer
          description: Producer id
          format: int64
      description: Producer identity
    reconfiguration:
      type: object
      properties:
        ns:
          type: string
          description: Namespace
        partition:
          type: integer
          description: Partition id
          format: int64
        previous_replicas:
          type: array
          description: Previous replica set
          items:
            $ref: '#/components/schemas/assignment'
        status:
          type: string
          description: Reconfiguration status
        topic:
          type: string
          description: Topic
        current_replicas:
          type: array
          items:
            $ref: '#/components/schemas/assignment'
          description: Current replica set
        bytes_left_to_move:
          type: integer
          description: Remaining bytes to move to new replicas
        bytes_moved:
          type: integer
          description: Bytes already moved to new replicas
        partition_size:
          type: integer
          description: Current size of partition
        reconciliation_statuses:
          type: array
          items:
            $ref: '#/components/schemas/partition_reconciliation_status'
          description: List of reconciliation statuses per node
      description: Partition reconfiguration details
    partition_reconciliation_status:
      type: object
      description: Partition reconciliation status on a node
      properties:
        node_id:
          type: integer
          description: ID of a node reporting the status
        operations:
          type: array
          items:
            $ref: '#/components/schemas/partition_reconciliation_operation'
          description: List of operations being executed on the node
    partition_reconciliation_operation:
      type: object
      description: Partition reconciliation being executed by a node on a specific shard
      properties:
        type:
          type: string
          description: Type of an operation currently being executed
        core:
          type: integer
          description: Core (shard) that the status comes from
        retry_number:
          type: integer
          description: Number of currently executing retry operations
        revision:
          type: integer
          description: Revision number of currently executing operation
        status:
          type: string
          description: Result of last operation
    transaction:
      type: object
      properties:
        lso_bound:
          type: integer
          description: First offset
          format: int64
        producer_id:
          $ref: '#/components/schemas/producer_identity'
        staleness_ms:
          type: integer
          description: How long transaction does not make progress
          format: int64
        status:
          type: string
          description: Transaction status
        timeout_ms:
          type: integer
          description: Transaction timeout
          format: int64
      description: Transaction details
    transactions:
      type: object
      properties:
        active_transactions:
          type: array
          description: Active transactions
          items:
            $ref: '#/components/schemas/transaction'
        expired_transactions:
          type: array
          description: Expired transactions
          items:
            $ref: '#/components/schemas/transaction'
      description: Transactions for current partition
    failure_injector_status:
      type: object
      properties:
        enabled:
          type: boolean
        probes:
          type: array
          items:
            $ref: '#/components/schemas/failure_probes'
      description: Status of failure injector with list of available probes
    failure_probes:
      type: object
      properties:
        module:
          type: string
          description: failure probes module name
        points:
          type: array
          description: list of failure points
          items:
            type: string
      description: Group of failure probes related with single resource
    group:
      type: object
      properties:
        etag:
          type: integer
          description: Raft term
          format: int64
        group_id:
          type: string
          description: Group id
      description: Group info
    partition_transaction:
      type: object
      properties:
        etag:
          type: integer
          description: Raft term
          format: int64
        ns:
          type: string
          description: namespace
        partition_id:
          type: integer
          description: partition
          format: int64
        topic:
          type: string
          description: topic
      description: Partition info
    transaction_summary:
      type: object
      properties:
        etag:
          type: integer
          description: Term of a transaction coordinated started a transaction
          format: int64
        groups:
          type: array
          description: Consumer groups for transaction
          items:
            $ref: '#/components/schemas/group'
        partitions:
          type: array
          description: Partitions for transaction
          items:
            $ref: '#/components/schemas/partition_transaction'
        pid:
          $ref: '#/components/schemas/producer_identity'
        staleness_ms:
          type: integer
          description: How long transaction does not make progress
          format: int64
        status:
          type: string
          description: Current status for transaction
        timeout_ms:
          type: integer
          description: Transaction timeout
          format: int64
        transactional_id:
          type: string
          description: Id of an application executing a transaction
        tx_seq:
          type: integer
          description: tx_seq identifies a transactions within a session
          format: int64
      description: Transaction summary
    cluster_health_overview:
      type: object
      properties:
        all_nodes:
          type: array
          description: ids of all nodes registered in the cluster
          items:
            type: integer
            format: int32
        controller_id:
          type: integer
          description: node that is currently a leader or `-1` if leader is not elected
          format: int32
        is_healthy:
          type: boolean
          description: basic cluster health indicator
        leaderless_partitions:
          type: array
          description: list of partitions for which no leader is elected
          items:
            type: string
        under_replicated_partitions:
          type: array
          items:
            type: string
          description: List of partitions where one or more replicas hasn't replicated all data
        bytes_in_cloud_storage:
          type: integer
          description: Total amount of bytes in object storage, or `-1` if unable to obtain data
        nodes_down:
          type: array
          description: ids of all nodes being recognized as down
          items:
            type: integer
            format: int32
      description: Returns simple overview of cluster status
    partition_balancer_status:
      type: object
      properties:
        current_reassignments_count:
          type: integer
          description: current number of partition reassignments in progress
          format: int32
        seconds_since_last_tick:
          type: integer
          description: last time the partition balancer ran
          format: int32
        status:
          type: string
          description: off/ready/in_progress/stalled
        violations:
          $ref: '#/components/schemas/partition_balancer_violations'
      description: Returns status of the partition autobalancer
    partition_balancer_violations:
      type: object
      properties:
        over_disk_limit_nodes:
          type: array
          items:
            type: integer
            format: int32
        unavailable_nodes:
          type: array
          items:
            type: integer
            format: int32
    uuid:
      type: object
      properties:
        cluster_uuid:
          type: string
    controller_status:
      type: object
      properties:
        commited_index:
          type: integer
          description: Committed index for controller consensus
          format: int64
        last_applied_offset:
          type: integer
          description: Last applied offset for controller stm
          format: int64
      description: Controller status
    leader_info:
      type: object
      properties:
        last_stable_leader_term:
          type: integer
          description: last stable leader term
          format: int64
        leader:
          type: integer
          description: current leader
          format: int64
        ns:
          type: string
          description: namespace
        partition_id:
          type: integer
          description: partition
          format: int64
        partition_revision:
          type: integer
          description: partition revision
          format: int64
        previous_leader:
          type: integer
          description: previous leader
          format: int64
        topic:
          type: string
          description: topic
        update_term:
          type: integer
          description: update term
          format: int64
      description: Leader info
    peer_status:
      type: object
      properties:
        since_last_status:
          type: integer
          description: Milliseconds since last update from peer
          format: int64
      description: Peer status
    self_test_node_report:
      type: object
      properties:
        node_id:
          type: integer
          description: node_id of the broker reporting
          format: int64
        results:
          type: array
          description: Recordings of test runs from a single node
          items:
            $ref: '#/components/schemas/self_test_result'
        status:
          type: string
          description: One of either idle / running / unreachable
      description: Current state of self test on a given broker
    self_test_result:
      type: object
      properties:
        info:
          type: string
          description: Additional test labels, metadata and/or information
        bps:
          type: integer
          description: Bytes operated on per second
          format: int64
        duration:
          type: integer
          description: Length of time the test took to complete
          format: int64
        error:
          type: string
          description: Stringified exception if any occurred during test execution
        max_latency:
          type: integer
          description: Maximum recorded latency measurement
          format: int64
        name:
          type: string
          description: Name of the test run
        p50:
          type: integer
          description: 50th percentile latencies
          format: int64
        p90:
          type: integer
          description: 90th percentile latencies
          format: int64
        p99:
          type: integer
          description: 99th percentile latencies
          format: int64
        p999:
          type: integer
          description: 999th percentile latencies
          format: int64
        rps:
          type: integer
          description: Number of requests per second
          format: int64
        test_id:
          type: string
          description: Global test uuid identifier
        test_type:
          type: string
          description: Type of self test, one of either disk/network
        timeouts:
          type: integer
          description: Number of io timeouts observed during run
          format: int64
        warning:
          type: string
          description: Warning that arose during test execution
      description: Result set from a single self_test run
    init_recovery_result:
      type: object
      properties:
        status:
          type: string
          description: current status of recovery process
      description: Result of initiation of recovery process in background
    recovery_request_params:
      type: object
      properties:
        retention_bytes:
          type: integer
          format: int32
        retention_ms:
          type: integer
          format: int32
        topic_names_pattern:
          type: string
    topic_download_counts:
      type: object
      properties:
        failed_downloads:
          type: integer
          format: int32
        pending_downloads:
          type: integer
          format: int32
        successful_downloads:
          type: integer
          format: int32
        topic_namespace:
          type: string
    topic_recovery_status:
      type: object
      properties:
        request:
          $ref: '#/components/schemas/recovery_request_params'
        state:
          type: string
        topic_download_counts:
          type: array
          items:
            $ref: '#/components/schemas/topic_download_counts'
    get_cluster_uuid:
      type: object
      description: TBD
    get_partition_balancer_status:
      type: object
      description: TBD
    cancel_all_partitions_reconfigurations:
      type: object
      description: TBD
